@inherits UmbracoViewPage<Umbraco.Core.Models.Blocks.BlockListItem>
@using ContentModels = Umbraco.Web.PublishedModels;
@using TSPadel_Umbraco.Extensions;
@{
    var eventDate = (ContentModels.ImageBlock)Model.Content;
    string imgStr = eventDate.Value<string>("blockimage");


    var typedMediaPickerSingle = eventDate.Value<MediaWithCrops>("myImage");
    if (typedMediaPickerSingle != null)
    {

    }
}
@{
    var widths = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
{
        { "25%", "col-12 col-md-3" },
        { "33%", "col-12 col-md-4" },
        { "50%", "col-12 col-md-6" },
        { "66%", "col-12 col-md-8" },
        { "75%", "col-12 col-md-9" }
    };

    var blockWidth = eventDate.Value<string>("blockWidth") ?? "";
    string widthName = widths.TryGetValue(blockWidth, out var wcss) ? wcss : "col-12";

    var crops = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
    {
        { "SMALL",  "small_Image" },
        { "MEDIUM", "mediumImage" },
        { "LARGE",  "largeImage" },
        { "SQUARE", "squareImage" }
    };

    var crop = eventDate.Value<string>("imageCrop") ?? "";
    string croppedName = crops.TryGetValue(crop, out var val) ? val : "mediumImage";
}

<div class="@widthName p-0">
    @{
        if (typedMediaPickerSingle != null)
        {
            var cropUrl = typedMediaPickerSingle.GetCropUrl(croppedName);
            <img src="@cropUrl" class="img-fluid" />
        }
        else
        {
            <p>No image available</p>
        }
    }
</div>
